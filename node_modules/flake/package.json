{
  "name": "flake",
  "description": "Generate unique (approximately sortable) IDs in a distributed environment.",
  "version": "0.3.1",
  "author": {
    "name": "Andrew Chilton",
    "email": "chilts@appsattic.com",
    "url": "http://www.chilts.org/"
  },
  "homepage": "https://github.com/appsattic/flake",
  "contributors": [],
  "devDependencies": {
    "tap": "~0.3.x"
  },
  "dependencies": {},
  "main": "./flake.js",
  "engines": {
    "node": ">= 0.6.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/appsattic/flake.git"
  },
  "bugs": {
    "url": "http://github.com/appsattic/flake/issues",
    "mail": "chilts@appsattic.com"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://appsattic.mit-license.org/2012/"
    }
  ],
  "keywords": [
    "distributed",
    "id",
    "unique",
    "twitter",
    "snowflake",
    "flake"
  ],
  "scripts": {
    "test": "tap test/*.js"
  },
  "readme": "Flake - generate unique (approximately sortable) IDs in a distributed environment.\n\n## Usage ##\n\n```\nrequire('flake')('eth0', function(err, flakeGen) {\n    console.log(flakeGen());\n    console.log(flakeGen());\n    console.log(flakeGen());\n});\n```\n\nWould give something like:\n\n```\n013b829b1520-0000-18f0-984be1b8b104\n013b829b1527-0000-18f0-984be1b8b104\n013b829b1527-0001-18f0-984be1b8b104\n```\n\nRunning it again might give:\n\n```\n013b829b9680-0000-18f3-984be1b8b104\n013b829b9680-0001-18f3-984be1b8b104\n013b829b9685-0000-18f3-984be1b8b104\n```\n\nAs you can see, the time has increased by a few seconds and the PID is different. The mac address is the same and the\nsequence always resets.\n\nNote: these unique IDs are not the same as UUIDs or can be used in place of one.\n\n## Format of each Unique ID ##\n\nEach unique ID has 4 sections which are:\n\n```\n013b83165f6a-00f9-314b-984be1b8b104\n= 013b83165f6a -> timestamp in ms since epoch\n= 00f9         -> counter\n= 314b         -> PID of the current process\n= 984be1b8b104 -> MAC address of the interface provided (e.g. 'eth0')\n```\n\nUnlike Twitter's Snowflake, we also use the PID since we want to be able to generate unique IDs on the same machine at\nthe same time. This is because we're generating them within the program which needs them and not in a client/server\narchitecture.\n\n## Approximately Sortable ##\n\nIf you were to generate IDs in multiple processes on the same machine and on multiple machines, then whilst we can't\nguarantee that the IDs will be exactly sortable, they will be approximately sortable. In fact, to the millisecond\n(assuming your clocks aren't skew from each other).\n\ne.g. some IDs generated on the same machine in two processes, using 'eth0' and 'wlan0' as the MAC address could be, and\nprinting out alternately:\n\n```\n013b83571852-0000-4ae8-984be1b8b104\n013b83571853-0000-4ae8-00027298bef9\n013b83571853-0000-4ae9-984be1b8b104\n013b83571853-0001-4ae8-00027298bef9\n013b83571853-0001-4ae9-984be1b8b104\n013b83571853-0002-4ae8-00027298bef9\n013b83571853-0002-4ae9-984be1b8b104\n013b83571853-0003-4ae8-00027298bef9\n013b83571853-0003-4ae9-984be1b8b104\n```\n\nAs you can see, the IDs are firstly sorted by timestamp, then sequence, the PID then mac address.\n\n## Non-Monotomic Clocks ##\n\nCurrently there is a possibility to generate the same ID in the same process on the same machine. This is described by\n[System Clock Depedency](https://github.com/twitter/snowflake#system-clock-dependency).\n\nThis situation hasn't yet been solved but is known about. Therefore, you should run NTP in a mode which doesn't move\nthe clock backwards.\n\n## License ##\n\nThe MIT License : http://opensource.org/licenses/MIT\n\nCopyright (c) 2012 AppsAttic Ltd. http://appsattic.com/\n\n(Ends)\n",
  "_id": "flake@0.3.1",
  "dist": {
    "shasum": "7e5c547bffa63ead1a3a938a55d7f425b34217e0"
  },
  "_from": "flake"
}
